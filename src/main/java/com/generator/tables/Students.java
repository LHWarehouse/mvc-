/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Keys;
import com.generator.Studentdb;
import com.generator.tables.records.StudentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Students extends TableImpl<StudentsRecord> {

    private static final long serialVersionUID = 1223756571;

    /**
     * The reference instance of <code>studentdb.students</code>
     */
    public static final Students STUDENTS = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentsRecord> getRecordType() {
        return StudentsRecord.class;
    }

    /**
     * The column <code>studentdb.students.id</code>.
     */
    public final TableField<StudentsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>studentdb.students.name</code>.
     */
    public final TableField<StudentsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>studentdb.students.sex</code>.
     */
    public final TableField<StudentsRecord, Boolean> SEX = createField("sex", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>studentdb.students.birth</code>.
     */
    public final TableField<StudentsRecord, LocalDateTime> BIRTH = createField("birth", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>studentdb.students.phone</code>.
     */
    public final TableField<StudentsRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CHAR.length(11), this, "");

    /**
     * The column <code>studentdb.students.addr</code>.
     */
    public final TableField<StudentsRecord, String> ADDR = createField("addr", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>studentdb.students</code> table reference
     */
    public Students() {
        this("students", null);
    }

    /**
     * Create an aliased <code>studentdb.students</code> table reference
     */
    public Students(String alias) {
        this(alias, STUDENTS);
    }

    private Students(String alias, Table<StudentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Students(String alias, Table<StudentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Studentdb.STUDENTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentsRecord> getPrimaryKey() {
        return Keys.KEY_STUDENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentsRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentsRecord>>asList(Keys.KEY_STUDENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Students as(String alias) {
        return new Students(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(name, null);
    }
}
